generator client {
  provider = "prisma-client-js"
  output   = "./"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model athlete {
  id                              Int                   @id @default(autoincrement())
  name                            String                @db.VarChar(50)
  surname                         String                @db.VarChar(50)
  gender                          athlete_gender_enum
  height                          Decimal?              @db.Decimal(5, 2)
  weight                          Decimal?              @db.Decimal(5, 2)
  birthdate                       DateTime?             @db.Date
  practiced_sport                 Int
  created_at                      DateTime?             @default(now()) @db.Timestamptz(6)
  created_by                      Int
  updated_at                      DateTime?             @db.Timestamptz(6)
  updated_by                      Int
  users_athlete_created_byTousers users                 @relation("athlete_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sport                           sport                 @relation(fields: [practiced_sport], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_athlete_updated_byTousers users                 @relation("athlete_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  athlete_competition             athlete_competition[]
}

model athlete_competition {
  id                                          Int                            @id @default(autoincrement())
  athlete_id                                  Int
  competition_id                              Int
  placement                                   athlete_competition_placement?
  created_at                                  DateTime?                      @default(now()) @db.Timestamptz(6)
  created_by                                  Int
  updated_at                                  DateTime?                      @db.Timestamptz(6)
  updated_by                                  Int
  athlete                                     athlete                        @relation(fields: [athlete_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  competition                                 competition                    @relation(fields: [competition_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users_athlete_competition_created_byTousers users                          @relation("athlete_competition_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_athlete_competition_updated_byTousers users                          @relation("athlete_competition_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([athlete_id, competition_id], map: "unique_athlete_competition_ids")
}

model competition {
  id                                  Int                   @id @default(autoincrement())
  title                               String                @db.VarChar(100)
  level                               competition_level
  from_date                           DateTime              @db.Date
  until_date                          DateTime              @db.Date
  created_at                          DateTime?             @default(now()) @db.Timestamptz(6)
  created_by                          Int
  updated_at                          DateTime?             @db.Timestamptz(6)
  updated_by                          Int
  athlete_competition                 athlete_competition[]
  users_competition_created_byTousers users                 @relation("competition_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_competition_updated_byTousers users                 @relation("competition_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sport {
  id                            Int       @id @default(autoincrement())
  name                          String    @unique(map: "unique_sport_name") @db.VarChar(50)
  created_at                    DateTime? @default(now()) @db.Timestamptz(6)
  created_by                    Int
  updated_at                    DateTime? @db.Timestamptz(6)
  updated_by                    Int
  athlete                       athlete[]
  users_sport_created_byTousers users     @relation("sport_created_byTousers", fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users_sport_updated_byTousers users     @relation("sport_updated_byTousers", fields: [updated_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id                                                        Int                        @id @default(autoincrement())
  name                                                      String                     @db.VarChar(50)
  surname                                                   String                     @db.VarChar(50)
  user_role                                                 users_role?                @default(GUEST)
  email                                                     String                     @unique(map: "unique_user_email") @db.VarChar(100)
  email_verified                                            Boolean?                   @default(false)
  password                                                  String                     @db.VarChar(200)
  created_at                                                DateTime?                  @default(now()) @db.Timestamptz(6)
  athlete_athlete_created_byTousers                         athlete[]                  @relation("athlete_created_byTousers")
  athlete_athlete_updated_byTousers                         athlete[]                  @relation("athlete_updated_byTousers")
  athlete_competition_athlete_competition_created_byTousers athlete_competition[]      @relation("athlete_competition_created_byTousers")
  athlete_competition_athlete_competition_updated_byTousers athlete_competition[]      @relation("athlete_competition_updated_byTousers")
  competition_competition_created_byTousers                 competition[]              @relation("competition_created_byTousers")
  competition_competition_updated_byTousers                 competition[]              @relation("competition_updated_byTousers")
  sport_sport_created_byTousers                             sport[]                    @relation("sport_created_byTousers")
  sport_sport_updated_byTousers                             sport[]                    @relation("sport_updated_byTousers")
  users_verification_tokens                                 users_verification_tokens?
}

model users_verification_tokens {
  id      Int      @id @default(autoincrement())
  email   String   @unique(map: "users_verification_tokens_unique_email") @db.VarChar(100)
  token   String   @db.VarChar(100)
  expires DateTime @db.Timestamptz(6)
  users   users    @relation(fields: [email], references: [email], onDelete: NoAction, onUpdate: NoAction)
}

enum athlete_competition_placement {
  I
  II
  III
  IV
}

enum athlete_gender_enum {
  M
  F
}

enum competition_level {
  REPUBLIC
  NATIONAL
  INTERNATIONAL
}

enum users_role {
  GUEST
  USER
  MODERATOR
  ADMIN
}
